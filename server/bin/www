#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
// var debug = require('debug')('server:server'); //目前用不上
var http = require('http');
var https = require('https')
var path = require('path')
var fs = require('fs')
var socket = require('../utils/socket')

/**
 * Get port from environment and store in Express.
 */

var httpPort = 80;
var httpsPort = 443;
app.set('port', httpPort);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

socket.createIOSocket(server);

/**
 * Listen on provided port, on all network interfaces.
 */

 var credentials = {
  key: fs.readFileSync(path.join(__dirname, '../cert/server.key')),
  cert: fs.readFileSync(path.join(__dirname, '../cert/server.cert'))
};
var servers = https.createServer(credentials, app);

server.listen(httpPort);
server.on('error', onError);
server.on('listening', onListening);

servers.listen(httpsPort);
servers.on('error', onHttpsError);
servers.on('listening', onHttpsListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpPort === 'string'
    ? 'Pipe ' + httpPort
    : 'Port ' + httpPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

function onHttpsError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof httpsPort === 'string'
    ? 'Pipe ' + httpsPort
    : 'Port ' + httpsPort;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}

function onHttpsListening() {
  var addr = servers.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  // debug('Listening on ' + bind);
  console.log('Listening on ' + bind);
}
